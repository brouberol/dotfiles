[user]
    name = Balthazar Rouberol

[alias]
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit
    ss = status -s
    ck = checkout
    cm = commit -m
    co = commit
    nb = "!sh -c 'git checkout -b $GIT_BRANCH_PREFIX$0'"
    wip = commit -m "WIP"
    cz = "!git commit --amend --no-edit"
    ll = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)  %Creset' --abbrev-commit --decorate --numstat
    pp = "!sh -c 'git pull && git push'"

    branch-name = "!git rev-parse --abbrev-ref HEAD"
    cleanup = "!git branch --merged | egrep  -v '\\*|master|prod|staging' | xargs -n 1 git branch -d"

    # test if a branch can be merged, without actually committing
    testmerge = merge --no-commit --no-ff

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"


    # Find the commits that were introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"

    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"

    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    pub = "!git push -u origin $(git branch-name)"

    publishf = "!git publish --force-with-lease"
    pubf = "!git publish --force-with-lease"

    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Pull new code on the current bramch
    update = "!git pull origin $(git branch-name) && git cleanup"
    up = "!git update"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { re='^[0-9]+$'; if [[ \"$1\" =~ $re ]]; then git rebase -i HEAD~$1; else git rebase $@; fi; }; r"

    # highlight the diff word-by-word, not line-by-line
    wdiff = diff --color-words

    # Fetch a remote branch and checkout to it
    fck = "!f() { git fetch origin \"$1\"; git checkout \"$1\"; }; f"

    # Display the commits in the current branch not yet merged in the master branch
    branch-lg = "!git lg $(git branch-name) --not master"

    # Display what changed between the current branch and the master branch
    branch-diff = "!git diff master $(git branch-name)"

    lasttag = "! git tag | tail -n 1"

[core]
    editor = /usr/bin/vim
    whitespace = trailing-space,space-before-tab,cr-before-eol

[push]
    default = current

[help]
    autocorrect = 1

[merge]
    # include the original line in a conflict, along with ours/theirs
    conflictStyle = diff3

    # include summaries of merge commits in newly created merge commit msg
    log = true

[apply]
    whitespace = fix

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[diff]
    algorithm = patience

[include]
    path = ~/.gitconfig.local

[url "ssh://gitea@git.maurice.fr:2222"]
    insteadOf = https://git.maurice.fr

[log]
    date = auto:human
[rebase]
	autoStash = true
[tag]
    sort = version:refname

[init]
	templatedir = ~/.git-templates
