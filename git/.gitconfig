[user]
    name = Balthazar Rouberol
    signingkey = /Users/br/.ssh/id_ed25519

[alias]
    # Short, readable git log
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit

    # Show what files were impacted in the commit tree
    ll = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an> %Creset' --abbrev-commit --decorate --numstat

    # Print branch names and how long ago they were worked on
    branches = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:yellow)%(refname:short)%(color:white)%09%(contents:subject)' refs/heads

    ss = status -s
    ck = checkout
    cm = commit -m
    co = commit

    # Create a new branch with a default prefix
    nb = "!sh -c 'git checkout -b $GIT_BRANCH_PREFIX$0'"

    wip = commit -m "WIP"
    cz = commit --amend --no-edit
    edit = commit --amend --only
    pp = "!sh -c 'git pull && git push'"
    branch-name = "!git rev-parse --abbrev-ref HEAD"

    # Interactive git branch using fzf
    ick = "!sh -c 'git checkout $(git branch | fzf)'"

    # Delete stale branches
    cleanup-local-merged = "!git branch --merged | egrep  -v '\\*|main|master|prod|staging' | xargs -n 1 git branch -d"

    cleanup-local-squashed-and-merged = "!git-cleanup-local-squashed-and-merged"

    cleanup = "!git cleanup-local-merged && git cleanup-local-squashed-and-merged"

    # test if a branch can be merged, without actually committing
    testmerge = merge --no-commit --no-ff

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

    # Find the commits that were introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"

    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"

    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    pub = "!git push -u origin $(git branch-name)"

    publishf = "!git publish --force-with-lease"
    pubf = "!git publish --force-with-lease"

    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Pull new code on the current branch + cleanup
    update = "!git pull origin $(git branch-name) && git cleanup"
    up = "!git update"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { re='^[0-9]+$'; if [[ \"$1\" =~ $re ]]; then git rebase -i HEAD~$1; else git rebase $@; fi; }; r"

    # find the parent branch of the current branch
    parent-branch = "!git show-branch | grep '\\*' | grep -v $(git branch-name) | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//'"

    # Interactive rebase of all commits in a feature branch
    reb-all = "!git rebase -i $(git merge-base $(git parent-branch) HEAD)"

    # return the name of the "main" branch (either main or master)
    mainbranch = "!f() { git for-each-ref --format '%(refname:short)' refs/heads/ | egrep \"main|master\"; }; f"

    # highlight the diff word-by-word, not line-by-line
    wdiff = diff --color-words

    # Fetch a remote branch and checkout to it
    fck = "!f() { git fetch origin \"$1\"; git checkout \"$1\"; }; f"

    # Display the commits in the current branch not yet merged in the master branch
    branch-lg = "!git lg $(git branch-name) --not $(git mainbranch)"

    # Display what changed between the current branch and the master branch
    branch-diff = "!git diff $(git mainbranch) $(git branch-name)"

    # Display the latest tag
    lasttag = "! git tag | tail -n 1"

    # Delete a branch once the associated PR was merged
    close-pr = "!f(){ git checkout $(git mainbranch);git up; }; f"

    # Rebase the current branch on the main one
    reb-pr = "!f() { git checkout $(git mainbranch); git up; git switch -; git reb -; }; f"

    # Open a pull request
    pr = "!gh pr create"

    # Create a fixup commit
    fixup = "!f(){ git commit --fixup :/\"$1\"; }; f"

[core]
    editor = vim
    whitespace = trailing-space,space-before-tab,cr-before-eol
    # Use https://github.com/dandavison/delta as diff pager
    pager = delta

[push]
    # Push on current branch by default if no branch is specified
    default = current
    autoSetupRemote = true

[help]
    autocorrect = 1

[merge]
    # include the original line in a conflict, along with ours/theirs
    conflictStyle = diff3

    # include summaries of merge commits in newly created merge commit msg
    log = true

    # See https://github.blog/2021-11-15-highlights-from-git-2-34/#a-new-default-merge-strategy
    strategy = ort

[apply]
    # remove trailing whitespaces
    whitespace = fix

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[diff]
    algorithm = patience

[log]
    # format git log dates in an understandable fashion (2 days ago, etc)
    date = auto:human

[rebase]
    autosquash = true

[tag]
    # Sort tags by ref name
    sort = version:refname

[init]
    # Use the default hooks when creating a new repo
    templatedir = ~/.git-templates
    defaultBranch = main

[interactive]
    # Use https://github.com/dandavison/delta when displaying an Interactive diff
    # eg when doing git add -p
    diffFilter = delta --color-only

[branch]
    # Sort dates from the most recently updated to the least
    sort = -committerdate

[includeIf "gitdir:~/work/"]
    # Include work config when committing on a work project
    path = ~/.gitconfig-work

[includeIf "gitdir:~/code/"]
    # Include personal config when working on a personal project
    path = ~/.gitconfig-perso

[fetch]
    prune = true

[pull]
    rebase = true

[gpg]
    format = ssh

[gpg "ssh"]
    allowedSignersFile = ~/.ssh/allowed_signers

[commit]
    gpgsign = true
