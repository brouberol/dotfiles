[user]
    email = balthazar.rouberol@datadoghq.com
    name = Balthazar Rouberol

[alias]
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    ss = status -s
    ck = checkout
    rb = rebase
    cm = commit -m
    nb = "!sh -c 'git checkout -b brouberol/$0'"
    wip = commit -m "WIP"
    cz = "!git commit --amend --no-edit"
    ll = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)  %Creset' --abbrev-commit --decorate --numstat

    branch-name = "!git rev-parse --abbrev-ref HEAD"
    cleanup = "!git branch --merged | egrep  -v '\\*|master|prod|staging' | xargs -n 1 git branch -d"

    # test if a branch can be merged, without actually committing
    testmerge = merge --no-commit --no-ff

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"


    # Find the commits that were introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"

    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"

    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"

    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Pull new code on the current bramch
    update = "!git pull origin $(git branch-name)"
    up = "!git update"

[core]
    editor = /usr/bin/vim
[push]
    default = current
[help]
	autocorrect = 1
